{
    "tips" : [
        {
            "description": "Download compressed data and uncompress with CURL",
            "tags": [
                "linux",
                "commands",
                "curl"
            ],
            "enabled": true,
            "contents" : [
                "Add `--compressed` option to curl to auto decompress data after download.",
                "e.g. curl --compressed https://api.stackexchange.com/2.2/sites"
            ]
        },
        {
            "description": "tempfile in Python",
            "tags": [
                "python",
                "programming"
            ],
            "enabled": true,
            "contents" : [
                "Use tempfile.NamedTemporaryFile() callable to have a temporary file with a visible name",
                "By default, file is opened in binary mode and is deleted on closing",
                "Use \"w+\" to open in text mode.",
                "Also works with context manager.",
                ">>> with tempfile.NamedTemporaryFile() as fp:",
                "...     fp.write(b'Hello world!')",
                "...     fp.seek(0)",
                "...     fp.read()",
                "b'Hello world!'"
            ]

        },
        {
            "description":"Python: Get home directory",
            "tags": [
                "programming",
                "python"
            ],
            "enabled":true,
            "contents":[
                "Class method pathlib.Path.home() returns a new path object",
                "representing user home directory (similar to os.path.expanduser(\"~\")",
                "Path object also supports / operator, so Path.home()/subdir/file is also possible"
            ]
        },
        {
            "description": "Find which shell I am in",
            "tags": [
                "linux",
                "shell"
            ],
            "contents":[
                "Run \"echo $SHELL\" ",
                "root@88a325681e8c:/# echo $SHELL",
                "/bin/bash"
            ]
        },
        {
            "description": "Find system information from command line",
            "tags": [
                "linux",
                "shell"
            ],
            "contents":[
                "uname, uname -a",
                "root@88a325681e8c:/# uname -a",
                "Linux 88a325681e8c 4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux",
                ""
            ]
        },
        {
            "description": "Find disk usage of directory and files with \"du\"",
            "tags": [
                "linux",
                "shell",
                "tools"
            ],
            "contents":[
                "du -a - display an entry for each file in the directory",
                "du -c - display a grand total",
                "du -h - display info in human readable form (take optional unit suffixes (-m for MB, -g for GB))",
                "du -d <depth> - stop at given depth level"
            ]
        },
        {
            "description": "Access last executed command in shell",
            "tags": [
                "linux",
                "shell"
            ],
            "contents":[
                "Use \"!!\" to access the last ran command"
            ]
        },
        {
            "description": "Get status of last command/process",
            "tags": [
                "linux",
                "shell"
            ],
            "contents":[
                "$? - return the status of the last command ran in shell"
            ]
        },
        {
            "description":"Access arguments from last command",
            "tags":[
                "linux",
                "programming",
                "shell"
            ],
            "contents":[
                "!^ - First argument",
                "!$ - Last argument",
                "!* - All arguments"
            ]
        },
        {
            "description": "Colorize ls output",
            "tags": [
                "linux",
                "shell"
            ],
            "contents":[
                "ls --color=always (on most Linux)",
                "ls -G (on macOS)"
            ]
        },
        {
            "description": "List files with their disk usage",
            "tags":[
                "shell",
                "linux"
            ],
            "contents":[
                "$ ls -lash",
                "Shows a **long** listing of **all** files along with their ",
                "**actual file size in number of blocks** (typically 512 bytes) and ",
                "file size in **human readable** form (e.g B for bytes, K for kilobytes, G for gigabytes etc)"
            ]
        },
        {
            "description":"Supress newline character in shell",
            "tags": [
                "shell",
                "linux"
            ],
            "contents":[
                "`echo -n` - skips the trailing newline character",
                "Note: some shells do not support -n option.",
                "For portability, use printf instead."
            ]
        },
        {
            "description":"Sort lines in shell",
            "tags":[
                "linux",
                "shell"
            ],
            "contents":[
                "sort - command to sort lines of text or binary data from standard input or a file descriptor.",
                "Default order: lexicographic",
                "-k <column number> - sort by a specific key",
                "-n - sort numerically",
                "-s - keep the sorting order stable"
            ]
        },
        {
            "description":"Generate sequence of numbers",
            "tags":[
                "linux",
                "shell"
            ],
            "contents":[
                "seq - Generate sequence of numbers",
                "starts from 1 and increments 1 by default",
                "$ seq 4 // generate 1 to 4",
                "$ seq 10 2 20 // generate 10 to 20, increment by 2"
            ]
        },
        {
            "description":"Find system calls used by a program",
            "tags":[
                "linux",
                "shell",
                "programming"
            ],
            "contents":[
                "strace <program>"
            ]
        },
        {
            "description":"Find disk usage of files and directories",
            "tags":[
                "linux",
                "shell"
            ],
            "contents":[
                "du - find disk usage of a directory and its files",
                "-a - display an entry for each file in the directory",
                "-c - display a grand total",
                "-h - display info in human readable form (take optional unit suffixes: -m for MB, -g for GB)",
                "-d <depth> - stop at given depth level"
            ]
        },
        {
            "description": "Where man pages are stored?",
            "tags":[
                "shell",
                "linux"
            ],
            "contents":[
                "Pages are searched first in the path given by option `-M` if specified.",
                "If `-M` is not specified, then the path specified in `MANPATH` is looked up.",
                "If neither `-M` nor `MANPATH` is specified, then the path to man pages is inferred from the config file.",
                "In general, the default set of man pages live in `/usr/share/man/`",
                "Applications can install in other paths too and update the `MANPATH` accordingly.",
                "The location of the config file can differ based on the distribution.",
                "/private/etc/man.conf - in macOS Mojave",
                "/etc/man.config - in many linux distributions"
            ]
        },
        {
            "description": "Convert epoch seconds into date",
            "tags":[
                "linux",
                "commands",
                "shell",
                "datetime"
            ],
            "contents":[
                "% date -r <seconds> # macOS",
                "$ date -d @<seconds> # on most linux",
                "$ date +%s # display current time in epoch seconds"
            ]
        },
        {
          "description": "Toggle reader mode in Safari",
          "tags":[
            "macOS",
            "shortcuts",
            "safari"
          ],
          "contents":[
            "`Cmd + Shift + R` - toggles reader mode on supported sites"
          ]
        },
        {
          "description": "Find files modified in last x minutes or x days",
          "tags":[
            "shell",
            "find",
            "linux",
            "commands"
          ],
          "contents":[
            "`$ find . -mmin -60` - find files modified in the last 60 minutes in current directory",
            "`$ find . -mtime -2` - find files modified in the last 48 hours in current directory"
          ]
        },
        {
          "description": "Find files accessed in last x minutes or x days",
          "tags":[
            "shell",
            "find",
            "linux",
            "commands"
          ],
          "contents":[
            "`$ find . -amin -60` - find files modified in the last 60 minutes in current directory",
            "`$ find . -atime -2` - find files modified in the last 48 hours in current directory"
          ]
        },
        {
          "description": "sshpass - specify password for ssh/scp login non-interactively",
          "tags":[
            "shell",
            "linux",
            "commands",
            "scp"
          ],
          "contents":[
            "`sshpass -p <password> ssh user@host \"command to run\"` - Use the specified password to connect using ssh",
            "`sshpass -p <password> scp <source> <destination>` - Use the specified password to connect using scp",
            "`SSHPASS=password sshpass -e ssh user@host command` - Take the password from the environment variable SSHPASS"
          ]
        },
        {
          "description": "scp - some helpful options (pqr)",
          "tags":[
            "shell",
            "linux",
            "commands",
            "scp"
          ],
          "contents":[
            "`-p` - Preserve modification times, access times, and modes",
            "`-q` - Quiet mode: disables the progress meter as well as warning and diagnostic messages from ssh",
            "`-r` - Recursively copy entire directories"
          ]
        },
        {
          "description": "ssh options - Ignore host key checking",
          "tags":[
            "ssh",
            "shell",
            "commands",
            "options"
          ],
          "contents":[
            "`-o StrictHostKeyChecking=no` - automatically add new host keys to users known hosts file. Often not needed in controlled environments",
            "`-o UserKnownHostsFile=/dev/null` - Use /dev/null instead of the default file (~/.ssh/known_hosts)",
            "Set `StrictHostKeyChecking no` in .ssh/config under `Host <hostname>` to apply this to per hosts"
          ]
        },
        {
          "description": "bash - a quick note on arrays",
          "tags":[
            "bash",
            "shell",
            "programming"
          ],
          "contents":[
            "arr=() # Create empty array",
            "arr+=(5) # Append a number to array",
            "arr+=(xyz) # Append a text to array; arrays can have numbers and strings",
            "${arr[@]} # Get all items from the array",
            "${!arr[@]} # Get all indices of the array. Index starts at 0",
            "${arr[3]} # Get the fourth item from the array",
            "${arr} # Get first item from the array. Equivalent to ${arr[0]}",
            "${arr[@]:i:n} # Get n elements starting at index i",
            "arr=( $(cmd) ) # Save output of a command into an array",
            "# Sample for loop",
            "for item in ${arr[@]};do",
            "    echo $item",
            "done"
          ]
        },
        {
          "description": "vim - show relative and absolute file path",
          "tags":[
            "vim",
            "programming",
            "editor",
            "shortcuts"
          ],
          "contents":[
            "Ctrl+G - shows the relative path of the current file",
            "{n}Ctrl+G - shows the relative path of the nth file in the buffer",
            "1Ctrl+G - shows the absolute path of the current file"
          ]
        },
        {
          "description": "vim - set/toggle option",
          "tags":[
            "vim",
            "shortcuts",
            "editor",
            "programming"
          ],
          "contents":[
            ":set <option> - switches on a toggle option",
            ":set <option>! - toggles the option",
            ":set <option>? - shows the value of option",
            "e.g :set nu - turns on the line number, :set nonumber - turns off the line number",
            ":set nu! toggles the line number on or off,"
          ]
        },
        {
            "description": "bash: read inputs",
            "tags":[
                "bash",
                "programming",
                "shell"
            ],
            "contents":[
                "read var # gets the input from the user and assings to the variable \"var\"",
                "read -p \"Prompt\" var # shows the prompt message",
                "read -ps \"Prompt\" var # shows the prompt message, but keeps the input hidden.",
                "# E.g.",
                "# $ read -p \"Select: \" choice",
                "# Select: 1",
                "# $ echo $choice",
                "# 1"
            ]
        },
        {
            "description": "vscode: Split terminal shortcuts",
            "tags":[
                "vscode",
                "shortcuts",
                "productivity"
            ],
            "contents":[
                "`Cmd + \\` - keyboard shortcut to split the terminal vertically",
                "`Cmd + Option + Left` - focus to the window on the left",
                "`Cmd + Option + Right` - focus to the window on the right"
            ]
        },
        {
            "description": "bash: arithmetic with let",
            "tags":[
                "bash",
                "shell",
                "programming"
            ],
            "contents":[
                "let # evaluates each argument as an arithmetic expression",
                "let a=1+9 # assigns a=10",
                "# If spacing needed for better readability, enclose the expression between quotes",
                "let \"b = 2 + 8\" # assigns b=10",
                "# Take values from variables",
                "let c=$a+$b # assigns sum of a and b to c",
                "# No escaping needed for *",
                "let \"d = $a * $b\" # assigns product of a and b to d",
                "let d++ # increment d by 1 and assign to d"
            ]
        },
        {
            "description": "bash: arithmetic with expr",
            "tags":[
                "bash",
                "shell",
                "programming"
            ],
            "contents":[
                "expr 2 + 7 # evaluate the expression and writes to standard output. Spaces are needed between the tokens",
                "# multiplication operator * need to be escaped",
                "expr 7 * 3 # results in syntax error",
                "expr 7 \\* 3 # evaluates to 21",
                "e=$(expr 2 + 7) # evaluate the expression and assign. Similar to $((expression))",
                "expr 2+7 # prints the expression as is without evaluating",
                "expr \"2 + 7\" # prints the expression as is without evaluating even with quotes"
            ]
        },
        {
            "description": "bash: arithmetic expansion",
            "tags":[
                "bash",
                "shell",
                "programming"
            ],
            "contents":[
                "# $((expression)) - evaluates the expression and substitutes the result.",
                "echo $((3+5)) # prints 8",
                "# spaces are totally fine",
                "f=$((4 + 4)) # evaluate the expression and assign the value to a variable",
                "g=$((f * 2)) # variables inside the expression need not be specified with a preceding $ sign",
                "echo $((g--)) $((g++)) # increment, decrement",
                "echo ((g += 5) # assignment operators (= *= /= %= += -= <<= >>= &= ^= |=) are also supported"
            ]
        },
        {
            "description": "ffmpeg2 - Convert video to gif",
            "tags":[
                "tools",
                "ffmpeg"
            ],
            "contents":[
                "# Supports multiple input file formats",
                "# -r <frame rate>",
                "# -vf <filter_graph> # e.g. -vf scale=w:hP",
                "ffmpeg2 -i <input file> -r 10 output.gif",
                "# set width to 320px and set height based on the width keeping the aspect ratio",
                "ffmpeg2 -i <input file> -r 10 -vf scale=320:-1 output.gif"
            ]
        },
        {
            "description": "bash: print values in hex",
            "tags":[
                "bash"
            ],
            "contents":[
                "printf \"0x%x\\n\", 369098752 # prints the value in hex format. e.g. 0x16000000"
            ]
        },
        {
            "description": "vim: yank shortcuts",
            "tags":[
                "vim",
                "shortcuts"
            ],
            "contents":[
                "`yw` - copy from current to start of the next word",
                "`yb` - copy from current to beginning of the current word",
                "`y$` - copy till the end of the line",
                "`y0` - copy till the start of the line",
                "`{n}Y` - copy n number of lines",
                "`{n}yy` - copy n number of lines"
            ]
        },
        {
            "description": "C: Get system time in epoch seconds (number of seconds since 1970-01-01 00:00:00 +0000 (UTC))",
            "tags":[
                "c",
                "programming",
                "datetime"
            ],
            "contents":[
                "time_t curtime = time(NULL); // time() included from time.h",
                "(void)time(&curtime); // also sets the seconds in the input buffer if given",
                "// can also get the time in microsecond granularity with gettimeofday",
                "struct timeval tm;",
                "struct timezone tz",
                "(void)gettimeofday(&tm, &tz); // included from sys/time.h",
                "// tm.tv_sec - epoch time in seconds",
                "// tm.tv_usec - microseconds",
                "// tz.tz_dsttime - is Daylight Savings on?",
                "// tz.tz_minuteswest - number of minutes from the GMT",
                "printf(\"secs=%lu, msecs=%d, is_dst=%d, minutes_from_gmt=%d\n\", tm.tv_sec, tm.tv_usec, tz.tz_dsttime, tz.tz_minuteswest);",
                "printf(\"timestamp=%s\", ctime(&tm.tv_sec)); // get clock time as a readable string",
                "// ctime returns a pointer to statically allocated buffer holding the stamp.",
                "// Subsequent calls to ctime() would overwrite the buffer. Use ctime_r() to write the string to user provided buffer instead."
            ]
        },
        {
            "description": "bash: display information about a command type",
            "tags":[
                "shell",
                "bash",
                "programming"
            ],
            "contents":[
                "type arg # arg can be a command, function, aliases an built-ins",
                "type -a arg # display all locations containing an executable named NAME",
                "type -t arg # output a single word which is one of alias, keyword, function, builtin, file",
                "# e.g.",
                "ubuntu@ubuntu-lts:~$ os_release()",
                "> {",
                ">     cat /etc/os-release",
                "> }",
                "ubuntu@ubuntu-lts:~$ type -t os_release",
                "function",
                "ubuntu@ubuntu-lts:~$ type -a os_release", 
                "os_release is a function",
                "os_release ()", 
                "{",
                "   cat /etc/os-release",
                "}"
            ]
        },
        {
            "description": "regex: filter ipv4 address",
            "tags":[
                "linux",
                "tools",
                "regex"
            ],
            "contents":[
                "# regex pattern to filter IPv4 addresses",
                "# upto 3 digits followed by ., repeated 3 times and up to 3 digits",
                "# this is too generic. so invalid IPs like 333.232.444.999 would also be considered valid",
                "ifconfig | egrep -o '([0-9]{1,3}\\.){3}[0-9]{1,3}'",
                "# To search for only valid IP addr and output only the IP addr",
                "ifconfig | egrep -o '((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'",
                "# Skip localhost and subnet masks",
                "ifconfig | egrep -o '((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' | egrep -v '^255|127.0.0.1'"
            ]
        },
        {
            "description": "sed - Get a line or range of lines",
            "tags":[
                "linux",
                "tools",
                "shell",
                "sed"
            ],
            "contents":[
                "# Get contents of line number n from file",
                "# -n - tells sed not to print the lines unless explicity requested",
                "# 'p' - print command",
                "# 'q' - quit sed",
                "sed -n '10p' # print line number 10, but will continue processing the rest of the file too",
                "sed -n '10p;11q' # print line number 10 and quit processing",
                "sed -n '5,10p;11q' # print line number from 5 to 10 and quit processing"
            ]
        },
        {
            "description":"grep - find empty lines",
            "tags":[
                "linux",
                "shell",
                "tools",
                "grep"
            ],
            "contents":[
                "grep -n '^$' <file> # print line numbers of empty lines in the given file"
            ]
        },
        {
            "description": "vim - clear all trailing whitespaces",
            "tags":[
                "linux",
                "vim",
                "tools"
            ],
            "contents":[
                "\" function to clear trailing white spaces",
                "fun! TrimTrailingWhiteSpace()",
                "    let l:save = winsaveview()",
                "    keeppatterns %s/\\s\\+$//e",
                "    call winrestview(l:save)",
                "    \" without saving and restoring the view, the cursor",
                "    \" moves to the line of the last search result where",
                "    \" the edit is made",
                "endfun",
                "",
                "\" Use a shortcut to invoke the function",
                "\" for e.g. I use the leader key \\ followed by w",
                "\\ + w to clear the trailing whitespace",
                ":noremap <Leader>w :call TrimTrailingWhiteSpace()<CR>"
            ]
        },
        {
            "description": "openssl - show certificate validity",
            "tags":[
                "tools",
                "openssl"
            ],
            "contents":[
                "# show notBefore and notAfter date of the given certificate",
                "openssl x509 -noout -startdate -enddate -in <certificate>",
                "# print all details of the certificate in text format",
                "openssl x509 -noout -text -in root_ca.crt"
            ]
        }
    ],
    "num_tips" : 43
}